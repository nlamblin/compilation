
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package fr.ul.miage.exemple.generated;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import fr.ul.miage.exemple.TableDesSymboles;
import fr.ul.miage.exemple.Arbre;
import fr.ul.miage.exemple.Noeud;
import fr.ul.miage.exemple.Assembleur;
import java.util.ArrayList;
import java.util.Collections;
import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParseException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\006\005" +
    "\000\002\020\007\000\002\020\010\000\002\003\013\000" +
    "\002\003\014\000\002\003\013\000\002\003\014\000\002" +
    "\010\003\000\002\011\003\000\002\012\003\000\002\022" +
    "\002\000\002\025\005\000\002\015\004\000\002\015\004" +
    "\000\002\015\002\000\002\005\005\000\002\005\005\000" +
    "\002\005\007\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\013\007" +
    "\000\002\013\013\000\002\017\007\000\002\024\005\000" +
    "\002\024\004\000\002\023\003\000\002\023\003\000\002" +
    "\023\004\000\002\023\006\000\002\026\004\000\002\026" +
    "\003\000\002\031\003\000\002\031\005\000\002\021\003" +
    "\000\002\021\004\000\002\030\006\000\002\030\005\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\004" +
    "\007\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\012\005\011\022\010\033\012\034\007\001" +
    "\002\000\014\002\ufffe\005\011\022\010\033\012\034\007" +
    "\001\002\000\004\002\177\001\002\000\014\002\ufffd\005" +
    "\011\022\010\033\012\034\007\001\002\000\004\035\013" +
    "\001\002\000\004\035\013\001\002\000\006\032\016\033" +
    "\017\001\002\000\004\035\013\001\002\000\006\004\ufff4" +
    "\037\ufff4\001\002\000\004\004\015\001\002\000\014\002" +
    "\uffec\005\uffec\022\uffec\033\uffec\034\uffec\001\002\000\004" +
    "\035\020\001\002\000\004\035\020\001\002\000\004\010" +
    "\ufff5\001\002\000\004\010\022\001\002\000\014\010\027" +
    "\011\ufff2\035\025\036\023\040\032\001\002\000\034\004" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\023\uffdd\024\uffdd\030\uffdd\001" +
    "\002\000\016\011\uffd5\012\074\013\075\014\076\015\073" +
    "\030\uffd5\001\002\000\034\004\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\023\uffdc\024\uffdc\030\uffdc\001\002\000\004\011\146\001" +
    "\002\000\012\010\027\035\025\036\023\040\032\001\002" +
    "\000\004\011\044\001\002\000\006\011\uffd7\030\042\001" +
    "\002\000\004\035\033\001\002\000\004\010\ufff3\001\002" +
    "\000\004\010\036\001\002\000\034\004\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\023\uffdb\024\uffdb\030\uffdb\001\002\000\014\010" +
    "\027\011\037\035\025\036\023\040\032\001\002\000\034" +
    "\004\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2\024\uffd2\030\uffd2" +
    "\001\002\000\004\011\041\001\002\000\034\004\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\023\uffd3\024\uffd3\030\uffd3\001\002\000" +
    "\012\010\027\035\025\036\023\040\032\001\002\000\004" +
    "\011\uffd6\001\002\000\004\006\045\001\002\000\016\022" +
    "\052\025\053\027\047\031\uffee\034\060\040\056\001\002" +
    "\000\020\007\uffee\022\052\025\053\027\047\031\uffee\034" +
    "\060\040\056\001\002\000\004\010\104\001\002\000\020" +
    "\007\uffe7\022\uffe7\025\uffe7\027\uffe7\031\uffe7\034\uffe7\040" +
    "\uffe7\001\002\000\020\007\uffee\022\052\025\053\027\047" +
    "\031\uffee\034\060\040\056\001\002\000\004\035\013\001" +
    "\002\000\004\010\104\001\002\000\020\007\uffea\022\uffea" +
    "\025\uffea\027\uffea\031\uffea\034\uffea\040\uffea\001\002\000" +
    "\020\007\uffe9\022\uffe9\025\uffe9\027\uffe9\031\uffe9\034\uffe9" +
    "\040\uffe9\001\002\000\004\035\033\001\002\000\004\031" +
    "\064\001\002\000\004\035\013\001\002\000\020\007\uffe8" +
    "\022\uffe8\025\uffe8\027\uffe8\031\uffe8\034\uffe8\040\uffe8\001" +
    "\002\000\004\004\063\001\002\000\020\007\ufffc\022\ufffc" +
    "\025\ufffc\027\ufffc\031\ufffc\034\ufffc\040\ufffc\001\002\000" +
    "\012\010\027\035\025\036\023\040\032\001\002\000\004" +
    "\007\066\001\002\000\014\002\ufff8\005\ufff8\022\ufff8\033" +
    "\ufff8\034\ufff8\001\002\000\014\004\uffd8\012\074\013\075" +
    "\014\076\015\073\001\002\000\004\004\071\001\002\000" +
    "\004\007\ufff1\001\002\000\012\010\027\035\025\036\023" +
    "\040\032\001\002\000\012\010\uffe3\035\uffe3\036\uffe3\040" +
    "\uffe3\001\002\000\012\010\uffe6\035\uffe6\036\uffe6\040\uffe6" +
    "\001\002\000\012\010\uffe5\035\uffe5\036\uffe5\040\uffe5\001" +
    "\002\000\012\010\uffe4\035\uffe4\036\uffe4\040\uffe4\001\002" +
    "\000\004\004\uffd9\001\002\000\020\004\uffde\011\uffde\012" +
    "\074\013\075\014\076\015\073\030\uffde\001\002\000\010" +
    "\004\uffdf\011\uffdf\030\uffdf\001\002\000\004\004\103\001" +
    "\002\000\020\007\uffca\022\uffca\025\uffca\027\uffca\031\uffca" +
    "\034\uffca\040\uffca\001\002\000\012\010\027\035\025\036" +
    "\023\040\032\001\002\000\004\006\106\001\002\000\016" +
    "\007\uffee\022\052\025\053\027\047\034\060\040\056\001" +
    "\002\000\004\007\110\001\002\000\022\007\uffe2\022\uffe2" +
    "\025\uffe2\026\111\027\uffe2\031\uffe2\034\uffe2\040\uffe2\001" +
    "\002\000\004\006\112\001\002\000\016\007\uffee\022\052" +
    "\025\053\027\047\034\060\040\056\001\002\000\004\007" +
    "\114\001\002\000\020\007\uffe1\022\uffe1\025\uffe1\027\uffe1" +
    "\031\uffe1\034\uffe1\040\uffe1\001\002\000\016\016\122\017" +
    "\117\020\124\021\116\023\123\024\120\001\002\000\012" +
    "\010\uffce\035\uffce\036\uffce\040\uffce\001\002\000\012\010" +
    "\uffd0\035\uffd0\036\uffd0\040\uffd0\001\002\000\012\010\uffcc" +
    "\035\uffcc\036\uffcc\040\uffcc\001\002\000\012\010\027\035" +
    "\025\036\023\040\032\001\002\000\012\010\uffd1\035\uffd1" +
    "\036\uffd1\040\uffd1\001\002\000\012\010\uffcd\035\uffcd\036" +
    "\uffcd\040\uffcd\001\002\000\012\010\uffcf\035\uffcf\036\uffcf" +
    "\040\uffcf\001\002\000\004\011\126\001\002\000\004\006" +
    "\uffcb\001\002\000\004\037\130\001\002\000\012\010\027" +
    "\035\025\036\023\040\032\001\002\000\014\004\132\012" +
    "\074\013\075\014\076\015\073\001\002\000\020\007\ufffb" +
    "\022\ufffb\025\ufffb\027\ufffb\031\ufffb\034\ufffb\040\ufffb\001" +
    "\002\000\004\004\134\001\002\000\020\007\ufffa\022\ufffa" +
    "\025\ufffa\027\ufffa\031\ufffa\034\ufffa\040\ufffa\001\002\000" +
    "\006\007\uffef\031\uffef\001\002\000\004\006\137\001\002" +
    "\000\016\007\uffee\022\052\025\053\027\047\034\060\040" +
    "\056\001\002\000\004\007\141\001\002\000\020\007\uffe0" +
    "\022\uffe0\025\uffe0\027\uffe0\031\uffe0\034\uffe0\040\uffe0\001" +
    "\002\000\006\007\ufff0\031\ufff0\001\002\000\012\012\074" +
    "\013\075\014\076\015\073\001\002\000\004\011\145\001" +
    "\002\000\034\004\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\023\uffda\024" +
    "\uffda\030\uffda\001\002\000\004\006\147\001\002\000\016" +
    "\022\052\025\053\027\047\031\uffee\034\060\040\056\001" +
    "\002\000\004\031\064\001\002\000\004\007\152\001\002" +
    "\000\014\002\ufff6\005\ufff6\022\ufff6\033\ufff6\034\ufff6\001" +
    "\002\000\006\011\uffd4\030\uffd4\001\002\000\004\010\155" +
    "\001\002\000\014\010\027\011\ufff2\035\025\036\023\040" +
    "\032\001\002\000\004\011\164\001\002\000\004\011\160" +
    "\001\002\000\004\006\161\001\002\000\016\007\uffee\022" +
    "\052\025\053\027\047\034\060\040\056\001\002\000\004" +
    "\007\163\001\002\000\014\002\ufff9\005\ufff9\022\ufff9\033" +
    "\ufff9\034\ufff9\001\002\000\004\006\165\001\002\000\016" +
    "\007\uffee\022\052\025\053\027\047\034\060\040\056\001" +
    "\002\000\004\007\167\001\002\000\014\002\ufff7\005\ufff7" +
    "\022\ufff7\033\ufff7\034\ufff7\001\002\000\004\037\171\001" +
    "\002\000\004\036\172\001\002\000\004\004\173\001\002" +
    "\000\014\002\uffeb\005\uffeb\022\uffeb\033\uffeb\034\uffeb\001" +
    "\002\000\004\004\175\001\002\000\014\002\uffed\005\uffed" +
    "\022\uffed\033\uffed\034\uffed\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\001\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\010\002\004\003\003\005\005\001\001\000" +
    "\010\002\177\003\003\005\005\001\001\000\002\001\001" +
    "\000\010\002\175\003\003\005\005\001\001\000\004\011" +
    "\173\001\001\000\004\011\167\001\001\000\002\001\001" +
    "\000\004\011\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\153\001\001\000\004" +
    "\010\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\030\022\025\023\023\031\027\001\001\000\002" +
    "\001\001\000\006\007\071\024\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\033\030\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\021\030\023\023\031\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\030" +
    "\023\023\031\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\050\013\054\015\056\016\045\017\047" +
    "\020\053\027\060\001\001\000\020\006\050\013\054\015" +
    "\141\016\045\017\047\020\053\027\060\001\001\000\004" +
    "\004\135\001\001\000\002\001\001\000\020\006\050\013" +
    "\054\015\134\016\045\017\047\020\053\027\060\001\001" +
    "\000\004\011\126\001\001\000\004\004\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\033\030\101" +
    "\001\001\000\004\025\064\001\001\000\004\011\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\066\026\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\071\024\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\071\024\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\114\001\001\000\002\001\001\000\020\006" +
    "\050\013\054\015\106\016\045\017\047\020\053\027\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\050\013\054\015\112\016\045\017\047" +
    "\020\053\027\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\130\001\001\000\006\007\071\024\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\050\013\054\015\137" +
    "\016\045\017\047\020\053\027\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\071" +
    "\024\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\050\013\054\015\147\016\045" +
    "\017\047\020\053\027\060\001\001\000\004\025\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\021\030\022\155\023\023\031" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\050\013\054\015\161\016\045\017" +
    "\047\020\053\027\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\050\013\054\015" +
    "\165\016\045\017\047\020\053\027\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {

//@@CUPDBG0
 
				//Creation de l'arbre
				Arbre arbre = new Arbre();

				//Creation de la table des symboles
				TableDesSymboles tds = new TableDesSymboles();

				//Liste ou l'on va ranger les noeuds correspondant aux instructions dans des fonctions
				ArrayList<Noeud> fusion_noeud_instruction = new ArrayList<>();

				//Attribut permettant de compter le nombre de param�tre d'une fonction lors de sa cr�ation
				public int nombre_de_parametre;

				//Attribut de type temporel permettant de stocker momentann�ment le nom de l'entit� � ajouter dans la TDS
				public String variable_temporelle;

				//Attribut permettant de d�finir quel entite nous recherchons dans la TDS
				//Prend comme valeur fonction, var ou null si on dois chercher un parametre non existant
				public String type_de_recherche_tds;

				//Atribut permettant de savoir quand on entre dans une iteration ou une condition
				public boolean token_condition;

				//Liste qui stocke les parametres d'une fonction cree
				public ArrayList<String> liste_parametre = new ArrayList<>();

			
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programme EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programme ::= function programme 
            {
              Object RESULT =null;
		//@@CUPDBG1

				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("programme",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programme ::= definition programme 
            {
              Object RESULT =null;
		//@@CUPDBG2

				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("programme",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programme ::= function 
            {
              Object RESULT =null;
		//@@CUPDBG3
 
				System.out.println(arbre.afficher());
				arbre.parcourirTousLesFils(arbre.racine,tds);
				arbre.afficherListeElement(tds);
				tds.verificationFonctionMain();
				System.out.println(tds.toString());

				Assembleur a = new Assembleur();
				System.out.println(a.genererProgramme(arbre.racine,tds));
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("programme",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programme ::= definition 
            {
              Object RESULT =null;
		//@@CUPDBG4
 
				System.out.println(arbre.afficher());
				arbre.parcourirTousLesFils(arbre.racine,tds);
				arbre.afficherListeElement(tds);
				tds.verificationFonctionMain();
				System.out.println(tds.toString());

				Assembleur a = new Assembleur();
				System.out.println(a.genererProgramme(arbre.racine,tds));
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("programme",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= DEFVAR nom_de_variable PV 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG5

					tds.inserer(nom,type,"interne");
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // affectation ::= AFFECT nom_de_variable EGAL entite PV 
            {
              Noeud RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud value = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG6
 
					Noeud eg = new Noeud("AFFECT", null);
					this.type_de_recherche_tds = "VAR";
					Noeud noeud_nom = new Noeud("VAR",""+tds.getId(nom,this.type_de_recherche_tds));
					eg.fils.add(noeud_nom);
					eg.fils.add(value);
					RESULT = eg;
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // affectation ::= AFFECT nom_de_variable EGAL entite expression PV 
            {
              Noeud RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int entileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int entiright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud enti = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expreleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int expreright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud expre = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG7
 				
					expre.fils.add(enti);
					Collections.reverse(expre.fils);
					Noeud eg = new Noeud("AFFECT", null);
					this.type_de_recherche_tds = "VAR";
					Noeud noeud_nom = new Noeud("VAR",""+tds.getId(nom,this.type_de_recherche_tds));
					eg.fils.add(noeud_nom);
					eg.fils.add(expre);
					RESULT = eg;
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function ::= FUNCTION VOID nom_de_fonction_creation PO parametre PF ACO suite_instruction ACF 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		//@@CUPDBG8
 				
					tds.ajouterType(nom,type);					
					tds.ajouterParametre(nom, ""+this.liste_parametre.size());
					this.liste_parametre.clear();
					Noeud n = new Noeud("FUNCTION",""+tds.getId(nom, this.type_de_recherche_tds));		
					
					n.fils = (ArrayList) fusion_noeud_instruction.clone();
					arbre.ajouterNoeud(n);
					fusion_noeud_instruction.clear();
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("function",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // function ::= FUNCTION INT nom_de_fonction_creation PO parametre PF ACO suite_instruction return ACF 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		//@@CUPDBG9
 
					tds.ajouterType(nom,type);
					tds.ajouterValeur(nom, "RETURN " + type);
					tds.ajouterParametre(nom, ""+this.liste_parametre.size());
					this.liste_parametre.clear();
					Noeud n = new Noeud("FUNCTION",""+tds.getId(nom, this.type_de_recherche_tds));
							
					n.fils = (ArrayList) fusion_noeud_instruction.clone();
					arbre.ajouterNoeud(n);
					fusion_noeud_instruction.clear();			
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("function",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function ::= FUNCTION VOID nom_de_fonction_creation PO pas_de_parametre PF ACO suite_instruction ACF 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		//@@CUPDBG10
 
					tds.ajouterType(nom,type);
					tds.ajouterParametre(nom, "0");
					this.liste_parametre.clear();
					Noeud n = new Noeud("FUNCTION",""+tds.getId(nom, this.type_de_recherche_tds));
								
					n.fils = (ArrayList) fusion_noeud_instruction.clone();
					Collections.reverse(n.fils);
					fusion_noeud_instruction.clear();
					arbre.ajouterNoeud(n);
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("function",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function ::= FUNCTION INT nom_de_fonction_creation PO pas_de_parametre PF ACO suite_instruction return ACF 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		//@@CUPDBG11
 
					tds.ajouterType(nom,type);					
					tds.ajouterValeur(nom, "RETURN " + type);
					tds.ajouterParametre(nom, "0");
					this.liste_parametre.clear();
					Noeud n = new Noeud("FUNCTION",""+tds.getId(nom, this.type_de_recherche_tds));	
						
					n.fils = (ArrayList) fusion_noeud_instruction.clone();
					Collections.reverse(n.fils);
					fusion_noeud_instruction.clear();
					arbre.ajouterNoeud(n);
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("function",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // nom_de_fonction_creation ::= VAR 
            {
              String RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG12

						this.type_de_recherche_tds = "parametre de nouvelle fonction";
						tds.inserer(nom,null,"fonction"); 
						RESULT = nom;
					
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("nom_de_fonction_creation",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nom_de_variable ::= VAR 
            {
              String RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG13

						this.type_de_recherche_tds = "VAR";
						RESULT = nom;
					
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("nom_de_variable",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nom_de_fonction_existante ::= VAR 
            {
              String RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG14

								this.type_de_recherche_tds = "Fonction existante";
								RESULT = nom;
							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("nom_de_fonction_existante",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // pas_de_parametre ::= 
            {
              Noeud RESULT =null;
		//@@CUPDBG15
 this.type_de_recherche_tds = "pas de parametre"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("pas_de_parametre",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // return ::= RETURN entite_pour_return PV 
            {
              Noeud RESULT =null;
		int entitleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int entitright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud entit = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG16

				Noeud n = new Noeud("RETURN", null);
				n.fils.add(entit);
				fusion_noeud_instruction.add(n);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("return",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // suite_instruction ::= instruction suite_instruction 
            {
              Noeud RESULT =null;
		int noeud_instructionleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int noeud_instructionright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud noeud_instruction = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG17

							if(this.token_condition){
								Noeud n = new Noeud("BLOC_INSTRUCTION",null);
								n.fils.add(noeud_instruction);
								this.fusion_noeud_instruction.add(n);
								
							}else{
								this.fusion_noeud_instruction.add(noeud_instruction);								
							}
							
						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suite_instruction",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // suite_instruction ::= declaration suite_instruction 
            {
              Noeud RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suite_instruction",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // suite_instruction ::= 
            {
              Noeud RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suite_instruction",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // definition ::= DEFVAR nom_de_variable PV 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG18
 
					tds.inserer(nom,type,"globale"); 
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // definition ::= INT nom_de_variable PV 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG19
 
					tds.inserer(nom,type,"globale"); 
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // definition ::= AFFECT nom_de_variable EGAL NUM PV 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG20
 tds.ajouterValeur(nom,value); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruction ::= affectation 
            {
              Noeud RESULT =null;
		int noeud_affectationleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int noeud_affectationright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud noeud_affectation = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG21

						RESULT = noeud_affectation;
					
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruction ::= conditionnelle 
            {
              Noeud RESULT =null;
		int noeud_conditionnelleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int noeud_conditionnelright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud noeud_conditionnel = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG22

						RESULT = noeud_conditionnel;
					
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruction ::= call 
            {
              Noeud RESULT =null;
		int noeud_callleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int noeud_callright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud noeud_call = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG23

						RESULT = noeud_call;
					
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruction ::= iteration 
            {
              Noeud RESULT =null;
		int noeud_iterationleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int noeud_iterationright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud noeud_iteration = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG24

						RESULT = noeud_iteration;
					
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operation ::= PLUS 
            {
              String RESULT =null;
		//@@CUPDBG25
 RESULT = "+"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operation ::= MOINS 
            {
              String RESULT =null;
		//@@CUPDBG26
 RESULT = "-"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operation ::= DIV 
            {
              String RESULT =null;
		//@@CUPDBG27
 RESULT = "/"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operation ::= MULT 
            {
              String RESULT =null;
		//@@CUPDBG28
 RESULT = "*"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operation",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // conditionnelle ::= IF condition ACO suite_instruction ACF 
            {
              Noeud RESULT =null;
		//@@CUPDBG29

						Noeud n = new Noeud("IF", null);
						n.fils = (ArrayList) this.fusion_noeud_instruction.clone();
						this.fusion_noeud_instruction.clear();	
						this.token_condition = false;					
						RESULT = n;
					
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // conditionnelle ::= IF condition ACO suite_instruction ACF ELSE ACO suite_instruction ACF 
            {
              Noeud RESULT =null;
		//@@CUPDBG30

						Noeud n = new Noeud("IF", null);
						n.fils = (ArrayList) this.fusion_noeud_instruction.clone();
						this.fusion_noeud_instruction.clear();
						this.token_condition = false;
						RESULT = n;
					
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditionnelle",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // iteration ::= WHILE condition ACO suite_instruction ACF 
            {
              Noeud RESULT =null;
		//@@CUPDBG31

					Noeud n = new Noeud("WHILE", null);
					n.fils = (ArrayList) this.fusion_noeud_instruction.clone();
					this.fusion_noeud_instruction.clear();	
					this.token_condition = false;					
					RESULT = n;
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iteration",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= operation entite expression 
            {
              Noeud RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int entitleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int entitright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud entit = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int expreleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expreright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud expre = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG32
 
					expre.fils.add(entit);
					Collections.reverse(expre.fils);
					Noeud n = new Noeud(ope,null);
					n.fils.add(expre);
					RESULT = n;
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= operation entite 
            {
              Noeud RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int entitleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int entitright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud entit = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG33
 
					Noeud n = new Noeud(ope,null);
					n.fils.add(entit);
					RESULT = n;
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // entite ::= NUM 
            {
              Noeud RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG34

				this.variable_temporelle = num;
				if(this.type_de_recherche_tds.equals("parametre de nouvelle fonction")){
					throw new ParseException(this.variable_temporelle + " est un param�tre incorrect de type NUM");
				}	
				RESULT = new Noeud("CONSTANTE",num); 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("entite",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // entite ::= VAR 
            {
              Noeud RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG35
 	
				this.variable_temporelle = var;
				String categorie = "";				
				if(this.type_de_recherche_tds.equals("parametre de nouvelle fonction")){		
					categorie = "parametre pour nouvelle fonction";
				}else{
					categorie = tds.getCategorie(var,this.type_de_recherche_tds);
				}

				if(categorie != null){
					if(categorie.equals("fonction")){
						RESULT = new Noeud("FUNC",""+tds.getId(var, this.type_de_recherche_tds));

					}else if(categorie.equals("parametre pour nouvelle fonction")){
						tds.inserer(this.variable_temporelle,"VAR","parametre");
						Noeud n = new Noeud("VAR",""+tds.getId(var, this.type_de_recherche_tds));
						RESULT = n;

					}else{

						this.type_de_recherche_tds = "VAR";
						RESULT = new Noeud("VAR",""+tds.getId(var, this.type_de_recherche_tds));

					}
				}else{
					throw new ParseException(var + " n'a pas �t� initialis�.");
				}
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("entite",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // entite ::= CALL appel_function 
            {
              Noeud RESULT =null;
		int noeud_callleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int noeud_callright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud noeud_call = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG36

				Noeud n = new Noeud("CALL", null);
				n.fils.add(noeud_call);
				RESULT = n;		
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("entite",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // entite ::= PO entite expression PF 
            {
              Noeud RESULT =null;
		int entitleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int entitright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud entit = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int expreleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int expreright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud expre = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG37

				expre.fils.add(entit);
				Collections.reverse(expre.fils);
				RESULT = expre;
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("entite",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // entite_pour_return ::= entite expression 
            {
              Noeud RESULT =null;
		int entitleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int entitright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud entit = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int expreleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expreright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud expre = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG38

							expre.fils.add(entit);
							Collections.reverse(expre.fils);
							RESULT = expre;
						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("entite_pour_return",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // entite_pour_return ::= entite 
            {
              Noeud RESULT =null;
		int entitleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int entitright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud entit = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG39

							RESULT = entit;
						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("entite_pour_return",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametre ::= entite_pour_parametre 
            {
              Noeud RESULT =null;
		int entit_pour_parametreleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int entit_pour_parametreright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud entit_pour_parametre = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG40


					this.type_de_recherche_tds = ("fin creation parametre");
					RESULT = entit_pour_parametre;
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametre ::= entite_pour_parametre VIRGUL parametre 
            {
              Noeud RESULT =null;
		int entit_pour_parametreleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int entit_pour_parametreright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud entit_pour_parametre = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud param = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG41

					this.type_de_recherche_tds = ("fin creation parametre");
					entit_pour_parametre.fils.add(param);
					RESULT = entit_pour_parametre;
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // entite_pour_parametre ::= entite 
            {
              Noeud RESULT =null;
		int entitleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int entitright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud entit = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG42

								if(this.type_de_recherche_tds.equals("parametre de nouvelle fonction")){
									this.liste_parametre.add(entit.cle);
								}
								
								RESULT = entit;
							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("entite_pour_parametre",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // entite_pour_parametre ::= entite expression 
            {
              Noeud RESULT =null;
		int entitleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int entitright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud entit = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int expreleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int expreright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud expre = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		//@@CUPDBG43

								if(this.type_de_recherche_tds.equals("parametre de nouvelle fonction")){
									this.liste_parametre.add(entit.cle);
								}
								expre.fils.add(entit);
								Collections.reverse(expre.fils);
								RESULT = expre;
							
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("entite_pour_parametre",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // appel_function ::= nom_de_fonction_existante PO parametre PF 
            {
              Noeud RESULT =null;
		int nom_fonctionleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int nom_fonctionright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String nom_fonction = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud param = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG44
						
					
						Noeud n = new Noeud("FUNC",""+tds.getId(nom_fonction, this.type_de_recherche_tds));
					
						n.fils.add(param);
						RESULT = n;
					
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("appel_function",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // appel_function ::= nom_de_fonction_existante PO PF 
            {
              Noeud RESULT =null;
		int nom_fonctionleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nom_fonctionright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String nom_fonction = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		//@@CUPDBG45
				
				
						Noeud n = new Noeud("FUNC",""+tds.getId(nom_fonction, this.type_de_recherche_tds));
										
						RESULT = n;
					
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("appel_function",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operateur ::= COMP 
            {
              Noeud RESULT =null;
		//@@CUPDBG46

					RESULT = new Noeud("==",null);
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operateur ::= INF 
            {
              Noeud RESULT =null;
		//@@CUPDBG47

					RESULT = new Noeud("<",null);
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operateur ::= SUP 
            {
              Noeud RESULT =null;
		//@@CUPDBG48

					RESULT = new Noeud(">",null);
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operateur ::= DIFF 
            {
              Noeud RESULT =null;
		//@@CUPDBG49

					RESULT = new Noeud("!=",null);
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operateur ::= SUP_EGAL 
            {
              Noeud RESULT =null;
		//@@CUPDBG50

					RESULT = new Noeud(">=",null);
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operateur ::= INF_EGAL 
            {
              Noeud RESULT =null;
		//@@CUPDBG51

					RESULT = new Noeud("<=",null);
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("operateur",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condition ::= PO entite operateur entite PF 
            {
              Object RESULT =null;
		int entileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int entiright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Noeud enti = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int opeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud ope = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int enti2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int enti2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud enti2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG52

					
					Noeud n = new Noeud("CONDITION",null);

					n.fils.add(enti);
					n.fils.add(ope);
					n.fils.add(enti2);

					this.fusion_noeud_instruction.add(n);
					this.token_condition = true;
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // call ::= CALL appel_function PV 
            {
              Noeud RESULT =null;
		int noeud_appel_functionleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int noeud_appel_functionright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud noeud_appel_function = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		//@@CUPDBG53

				Noeud n = new Noeud("CALL", null);
				n.fils.add(noeud_appel_function);
				RESULT = n;
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("call",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
