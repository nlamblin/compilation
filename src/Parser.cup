/*
 * analyseur syntaxique  du langage exemple-expr:
 * expression arithmetique
 * (voir supports de cours)
 *
 * auteur : azim.roussanaly@univ-lorraine.fr
 * (c) 2013
 */ 
package fr.ul.miage.exemple.generated;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import fr.ul.miage.exemple.TableDesSymboles;
import fr.ul.miage.exemple.Arbre;
import fr.ul.miage.exemple.Noeud;
import fr.ul.miage.exemple.Assembleur;
import java.util.ArrayList;
import java.util.Collections;
import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.ParseException;
/* la grammaire */
action code {: 
				//Creation de l'arbre
				Arbre arbre = new Arbre();

				//Creation de la table des symboles
				TableDesSymboles tds = new TableDesSymboles();

				//Liste ou l'on va ranger les noeuds correspondant aux instructions dans des fonctions
				ArrayList<Noeud> fusion_noeud_instruction = new ArrayList<>();

				//Attribut permettant de compter le nombre de param�tre d'une fonction lors de sa cr�ation
				public int nombre_de_parametre;

				//Attribut de type temporel permettant de stocker momentann�ment le nom de l'entit� � ajouter dans la TDS
				public String variable_temporelle;

				//Attribut permettant de d�finir quel entite nous recherchons dans la TDS
				//Prend comme valeur fonction, var ou null si on dois chercher un parametre non existant
				public String type_de_recherche_tds;

				//Atribut permettant de savoir quand on entre dans une iteration ou une condition
				public boolean token_condition;

				//Liste qui stocke les parametres d'une fonction cree
				public ArrayList<String> liste_parametre = new ArrayList<>();

			:};
terminal PV, FUNCTION, ACO, ACF, PO, PF;
terminal PLUS, MOINS, DIV, MULT,COMP, INF, SUP, DIFF, AFFECT, SUP_EGAL, INF_EGAL;
terminal IF, ELSE, WHILE,VIRGUL, RETURN;
terminal String VOID, INT,DEFVAR,VAR, NUM;
terminal Noeud EGAL,CALL;
non terminal programme, function;
non terminal condition;
non terminal definition,declaration;
non terminal String operation,nom_de_fonction_creation, nom_de_variable, nom_de_fonction_existante;
non terminal Noeud conditionnelle,operateur,suite_instruction, instruction;
non terminal Noeud iteration,affectation,entite_pour_parametre, pas_de_parametre;
non terminal Noeud entite,expression,return,entite_pour_return,call,appel_function,parametre;
start with programme;
// LECTURE
programme	::= function programme
				{:
				:}
			| definition programme
				{:
				:}
			| function
			{: 
				System.out.println(arbre.afficher());
				arbre.parcourirTousLesFils(arbre.racine,tds);
				arbre.afficherListeElement(tds);
				tds.verificationFonctionMain();
				System.out.println(tds.toString());

				Assembleur a = new Assembleur();
				System.out.println(a.genererProgramme(arbre.racine,tds));
			:}
			| definition
			{: 
				System.out.println(arbre.afficher());
				arbre.parcourirTousLesFils(arbre.racine,tds);
				arbre.afficherListeElement(tds);
				tds.verificationFonctionMain();
				System.out.println(tds.toString());

				Assembleur a = new Assembleur();
				System.out.println(a.genererProgramme(arbre.racine,tds));
			:}
			;
			
// DECLARATION ET AFFECTATION
declaration	::= DEFVAR:type nom_de_variable:nom PV
				{:
					tds.inserer(nom,type,"interne");
				:}
			;
affectation ::= AFFECT nom_de_variable:nom EGAL entite:value PV
				{: 
					Noeud eg = new Noeud("AFFECT", null);
					this.type_de_recherche_tds = "VAR";
					Noeud noeud_nom = new Noeud("VAR",""+tds.getId(nom,this.type_de_recherche_tds));
					eg.fils.add(noeud_nom);
					eg.fils.add(value);
					RESULT = eg;
				:}
			|	AFFECT nom_de_variable:nom EGAL entite:enti expression:expre PV
				{: 				
					expre.fils.add(enti);
					Collections.reverse(expre.fils);
					Noeud eg = new Noeud("AFFECT", null);
					this.type_de_recherche_tds = "VAR";
					Noeud noeud_nom = new Noeud("VAR",""+tds.getId(nom,this.type_de_recherche_tds));
					eg.fils.add(noeud_nom);
					eg.fils.add(expre);
					RESULT = eg;
				:}
			;
// FONCTION
function 	::= FUNCTION VOID:type nom_de_fonction_creation:nom PO parametre PF ACO suite_instruction ACF
				{: 				
					tds.ajouterType(nom,type);					
					tds.ajouterParametre(nom, ""+this.liste_parametre.size());
					this.liste_parametre.clear();
					Noeud n = new Noeud("FUNCTION",""+tds.getId(nom, this.type_de_recherche_tds));		
					
					n.fils = (ArrayList) fusion_noeud_instruction.clone();
					arbre.ajouterNoeud(n);
					fusion_noeud_instruction.clear();
				:}
			| 	FUNCTION INT:type nom_de_fonction_creation:nom PO parametre PF ACO suite_instruction return ACF
				{: 
					tds.ajouterType(nom,type);
					tds.ajouterValeur(nom, "RETURN " + type);
					tds.ajouterParametre(nom, ""+this.liste_parametre.size());
					this.liste_parametre.clear();
					Noeud n = new Noeud("FUNCTION",""+tds.getId(nom, this.type_de_recherche_tds));
							
					n.fils = (ArrayList) fusion_noeud_instruction.clone();
					arbre.ajouterNoeud(n);
					fusion_noeud_instruction.clear();			
				:}
			| 	FUNCTION VOID:type nom_de_fonction_creation:nom PO pas_de_parametre PF ACO suite_instruction ACF
				{: 
					tds.ajouterType(nom,type);
					tds.ajouterParametre(nom, "0");
					this.liste_parametre.clear();
					Noeud n = new Noeud("FUNCTION",""+tds.getId(nom, this.type_de_recherche_tds));
								
					n.fils = (ArrayList) fusion_noeud_instruction.clone();
					Collections.reverse(n.fils);
					fusion_noeud_instruction.clear();
					arbre.ajouterNoeud(n);
				:}
			| 	FUNCTION INT:type nom_de_fonction_creation:nom PO pas_de_parametre PF ACO suite_instruction return ACF
				{: 
					tds.ajouterType(nom,type);					
					tds.ajouterValeur(nom, "RETURN " + type);
					tds.ajouterParametre(nom, "0");
					this.liste_parametre.clear();
					Noeud n = new Noeud("FUNCTION",""+tds.getId(nom, this.type_de_recherche_tds));	
						
					n.fils = (ArrayList) fusion_noeud_instruction.clone();
					Collections.reverse(n.fils);
					fusion_noeud_instruction.clear();
					arbre.ajouterNoeud(n);
				:}
			;

nom_de_fonction_creation ::= VAR:nom
					{:
						this.type_de_recherche_tds = "parametre de nouvelle fonction";
						tds.inserer(nom,null,"fonction"); 
						RESULT = nom;
					:}
				;				
				
nom_de_variable ::= VAR:nom
					{:
						this.type_de_recherche_tds = "VAR";
						RESULT = nom;
					:}
				;
				
nom_de_fonction_existante ::= VAR:nom
							{:
								this.type_de_recherche_tds = "Fonction existante";
								RESULT = nom;
							:}
							;				
				
pas_de_parametre ::=  
					{: this.type_de_recherche_tds = "pas de parametre"; :}
					; 
				
return 	::=	RETURN entite_pour_return:entit PV
			{:
				Noeud n = new Noeud("RETURN", null);
				n.fils.add(entit);
				fusion_noeud_instruction.add(n);
			:}
		;
		
// Instruction
suite_instruction 	::= instruction:noeud_instruction suite_instruction
						{:
							if(this.token_condition){
								Noeud n = new Noeud("BLOC_INSTRUCTION",null);
								n.fils.add(noeud_instruction);
								this.fusion_noeud_instruction.add(n);
								
							}else{
								this.fusion_noeud_instruction.add(noeud_instruction);								
							}
							
						:}
					| declaration suite_instruction
					|
					;
					
definition ::= DEFVAR:type nom_de_variable:nom PV
				{: 
					tds.inserer(nom,type,"globale"); 
				:}
			| INT:type nom_de_variable:nom PV				
				{: 
					tds.inserer(nom,type,"globale"); 
				:}
			| AFFECT nom_de_variable:nom EGAL NUM:value PV	
				{: tds.ajouterValeur(nom,value); :}
			;
instruction 	::= affectation:noeud_affectation
					{:
						RESULT = noeud_affectation;
					:} 
				| conditionnelle:noeud_conditionnel
					{:
						RESULT = noeud_conditionnel;
					:}		
				|	call:noeud_call
					{:
						RESULT = noeud_call;
					:}
				|	iteration:noeud_iteration
					{:
						RESULT = noeud_iteration;
					:}
				;	
operation	::= PLUS
				{: RESULT = "+"; :}
			|	MOINS
				{: RESULT = "-"; :}
			|	DIV
				{: RESULT = "/"; :}
			|	MULT
				{: RESULT = "*"; :}
			;
			
conditionnelle 	::=	IF condition ACO suite_instruction ACF
					{:
						Noeud n = new Noeud("IF", null);
						n.fils = (ArrayList) this.fusion_noeud_instruction.clone();
						this.fusion_noeud_instruction.clear();	
						this.token_condition = false;					
						RESULT = n;
					:}
				|	IF condition ACO suite_instruction ACF ELSE ACO suite_instruction ACF
					{:
						Noeud n = new Noeud("IF", null);
						n.fils = (ArrayList) this.fusion_noeud_instruction.clone();
						this.fusion_noeud_instruction.clear();
						this.token_condition = false;
						RESULT = n;
					:}
				;
				
iteration	::= WHILE condition ACO suite_instruction ACF
				{:
					Noeud n = new Noeud("WHILE", null);
					n.fils = (ArrayList) this.fusion_noeud_instruction.clone();
					this.fusion_noeud_instruction.clear();	
					this.token_condition = false;					
					RESULT = n;
				:}
			;
			
expression 	::= operation:ope entite:entit expression:expre	
				{: 
					expre.fils.add(entit);
					Collections.reverse(expre.fils);
					Noeud n = new Noeud(ope,null);
					n.fils.add(expre);
					RESULT = n;
				:}
			|	operation:ope entite:entit
				{: 
					Noeud n = new Noeud(ope,null);
					n.fils.add(entit);
					RESULT = n;
				:}
			;					
// AUTRE
entite 	::= NUM:num 
			{:
				this.variable_temporelle = num;
				if(this.type_de_recherche_tds.equals("parametre de nouvelle fonction")){
					throw new ParseException(this.variable_temporelle + " est un param�tre incorrect de type NUM");
				}	
				RESULT = new Noeud("CONSTANTE",num); 
			:}
		|	VAR:var 
			{: 	
				this.variable_temporelle = var;
				String categorie = "";				
				if(this.type_de_recherche_tds.equals("parametre de nouvelle fonction")){		
					categorie = "parametre pour nouvelle fonction";
				}else{
					categorie = tds.getCategorie(var,this.type_de_recherche_tds);
				}

				if(categorie != null){
					if(categorie.equals("fonction")){
						RESULT = new Noeud("FUNC",""+tds.getId(var, this.type_de_recherche_tds));

					}else if(categorie.equals("parametre pour nouvelle fonction")){
						tds.inserer(this.variable_temporelle,"VAR","parametre");
						Noeud n = new Noeud("VAR",""+tds.getId(var, this.type_de_recherche_tds));
						RESULT = n;

					}else{

						this.type_de_recherche_tds = "VAR";
						RESULT = new Noeud("VAR",""+tds.getId(var, this.type_de_recherche_tds));

					}
				}else{
					throw new ParseException(var + " n'a pas �t� initialis�.");
				}
			:}
		|	CALL appel_function:noeud_call
			{:
				Noeud n = new Noeud("CALL", null);
				n.fils.add(noeud_call);
				RESULT = n;		
			:}
		|	PO entite:entit expression:expre PF
			{:
				expre.fils.add(entit);
				Collections.reverse(expre.fils);
				RESULT = expre;
			:}
		;
		
entite_pour_return 	::= entite:entit expression:expre
						{:
							expre.fils.add(entit);
							Collections.reverse(expre.fils);
							RESULT = expre;
						:}
					|	entite:entit
						{:
							RESULT = entit;
						:}
					;
parametre 	::= entite_pour_parametre:entit_pour_parametre
				{:

					this.type_de_recherche_tds = ("fin creation parametre");
					RESULT = entit_pour_parametre;
				:}
			| 	entite_pour_parametre:entit_pour_parametre VIRGUL parametre:param
				{:
					this.type_de_recherche_tds = ("fin creation parametre");
					entit_pour_parametre.fils.add(param);
					RESULT = entit_pour_parametre;
				:}
			;		
					
entite_pour_parametre 	::=	entite:entit
							{:
								if(this.type_de_recherche_tds.equals("parametre de nouvelle fonction")){
									this.liste_parametre.add(entit.cle);
								}
								
								RESULT = entit;
							:}
						| 	entite:entit expression:expre
							{:
								if(this.type_de_recherche_tds.equals("parametre de nouvelle fonction")){
									this.liste_parametre.add(entit.cle);
								}
								expre.fils.add(entit);
								Collections.reverse(expre.fils);
								RESULT = expre;
							:}
						;		
			
appel_function 	::= nom_de_fonction_existante:nom_fonction PO parametre:param PF
					{:						
					
						Noeud n = new Noeud("FUNC",""+tds.getId(nom_fonction, this.type_de_recherche_tds));
					
						n.fils.add(param);
						RESULT = n;
					:}
				|	nom_de_fonction_existante:nom_fonction PO PF
					{:				
				
						Noeud n = new Noeud("FUNC",""+tds.getId(nom_fonction, this.type_de_recherche_tds));
										
						RESULT = n;
					:}
				;	
				
operateur	::= COMP
				{:
					RESULT = new Noeud("==",null);
				:}
			|	INF
				{:
					RESULT = new Noeud("<",null);
				:}
			|	SUP
				{:
					RESULT = new Noeud(">",null);
				:}
			|	DIFF
				{:
					RESULT = new Noeud("!=",null);
				:}
			|	SUP_EGAL
				{:
					RESULT = new Noeud(">=",null);
				:}
			|	INF_EGAL
				{:
					RESULT = new Noeud("<=",null);
				:}
			;
			
condition 	::= PO entite:enti operateur:ope entite:enti2 PF
				{:
					
					Noeud n = new Noeud("CONDITION",null);

					n.fils.add(enti);
					n.fils.add(ope);
					n.fils.add(enti2);

					this.fusion_noeud_instruction.add(n);
					this.token_condition = true;
				:}
			;
			
call 	::= CALL appel_function:noeud_appel_function PV
			{:
				Noeud n = new Noeud("CALL", null);
				n.fils.add(noeud_appel_function);
				RESULT = n;
			:}
		;