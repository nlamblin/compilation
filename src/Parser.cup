/*
 * analyseur syntaxique  du langage exemple-expr:
 * expression arithmetique
 * (voir supports de cours)
 *
 * auteur : azim.roussanaly@univ-lorraine.fr
 * (c) 2013
 */ 
package fr.ul.miage.exemple.generated;


/* la grammaire */

terminal EGAL, DEFVAR, DOT, FUNCTION, VOID, ACO, ACF, PO, PF, NUM;
terminal COMP, INF, SUP, DIFF, AFFECT, SUP_EGAL, INF_EGAL,VAR, INT;
terminal PLUS, MOINS, DIV, MULT, IF, ELSE, WHILE;

non terminal  file, line, function, parametre, expression, affectation;
non terminal  calcul, type_retour, instruction, def_var, action_affect;
non terminal  entite, operation, conditionnelle, condition, operateur, iteration, declaration;

start with file;

file ::= line file
		|line {: System.out.println("La fin de fichier fonctionne"); :};

line ::= function
		|ACF
		|expression;

function ::= FUNCTION type_retour VAR PO parametre PF ACO {: System.out.println("La fonction fonctionne"); :};

type_retour ::= VOID
				|INT;

parametre ::= INT VAR
				|;

expression ::= declaration
				|affectation
				|conditionnelle	
				|iteration;

declaration ::= DEFVAR VAR DOT;

affectation ::= AFFECT VAR EGAL entite DOT
				|AFFECT VAR EGAL calcul DOT;

entite ::= NUM
			|VAR
			|PO calcul PF;

calcul ::= entite operation entite
			|entite operation calcul;			

operation ::= PLUS
				|MOINS
				|DIV
				|MULT;

conditionnelle ::= IF condition ACO expression ACF
					|IF condition ACO expression ACF ELSE ACO expression ACF;

condition ::= PO entite operateur entite PF;

operateur ::= COMP
				|INF
				|SUP
				|DIFF
				|SUP_EGAL
				|INF_EGAL;

iteration ::= WHILE condition ACO expression ACF;
