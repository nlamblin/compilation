/*
 * analyseur syntaxique  du langage exemple-expr:
 * expression arithmetique
 * (voir supports de cours)
 *
 * auteur : azim.roussanaly@univ-lorraine.fr
 * (c) 2013
 */ 
package fr.ul.miage.exemple.generated;
import fr.ul.miage.exemple.TableDesSymboles;


/* la grammaire */

action code {: TableDesSymboles tds = new TableDesSymboles() ;:};

terminal EGAL, DEFVAR, PV, FUNCTION, VOID, ACO, ACF, PO, PF, NUM;
terminal COMP, INF, SUP, DIFF, AFFECT, SUP_EGAL, INF_EGAL,VAR, INT;
terminal PLUS, MOINS, DIV, MULT, IF, ELSE, WHILE, CALL,VIRGUL, RETURN;

non terminal  programme, function, parametre, expression, affectation, instruction;
non terminal  type_retour, call, operateur, iteration, declaration;
non terminal  entite, operation, conditionnelle, condition, appel_function,entite_pour_return;
non terminal  entite_pour_parametre, return,suite_instruction, definition;

start with programme;

// LECTURE
programme	::= function programme
			| definition programme
			| function
			{: System.out.println(tds.toString()); :}
			| definition
			{: System.out.println(tds.toString()); :}
			;
			

// DECLARATION ET AFFECTATION
declaration	::= DEFVAR VAR PV
			;

affectation ::= AFFECT VAR:nom EGAL entite:value PV
				{: tds.ajouterValeur((String)nom,(String)value); :}
			|	AFFECT VAR:nom EGAL entite expression PV
			;

// FONCTION
function 	::= FUNCTION VOID:type VAR:nom PO parametre PF ACO suite_instruction ACF
				{: tds.inserer((String)nom,(String)type,"fonction"); :}
			| 	FUNCTION INT:type VAR:nom PO parametre PF ACO suite_instruction return ACF
				{: tds.inserer((String)nom,(String)type,"fonction"); :}
			| 	FUNCTION VOID:type VAR:nom PO PF ACO suite_instruction ACF
				{: tds.inserer((String)nom,(String)type,"fonction"); :}
			| 	FUNCTION INT:type VAR:nom PO PF ACO suite_instruction return ACF
				{: tds.inserer((String)nom,(String)type,"fonction"); :}
			;
			
appel_function 	::= entite PO parametre PF
				|	entite PO PF
				;
				
return 	::=	RETURN entite_pour_return PV
		;
		
// Instruction
suite_instruction 	::= instruction suite_instruction
					|
					;
					
definition ::= DEFVAR:type VAR:nom PV
			{: tds.inserer((String)nom,(String)type,"globale"); :}
			| INT:type VAR:nom PV				
			{: tds.inserer((String)nom,(String)type,"globale"); :}
			| AFFECT VAR:nom EGAL NUM:value PV	
			{: tds.ajouterValeur((String)nom,(String)value); :}
			;


instruction 	::= declaration
				|	affectation 
				|	conditionnelle	
				|	call
				|	iteration
				;
			
expression 	::= operation entite
			|	operation entite expression
			;			

operation	::= PLUS
			|	MOINS
			|	DIV
			|	MULT
			;

conditionnelle 	::=	IF condition ACO suite_instruction ACF
				|	IF condition ACO suite_instruction ACF ELSE ACO suite_instruction ACF
				;
				
iteration	::= WHILE condition ACO suite_instruction ACF
			;
			

// AUTRE
entite 	::= NUM: num {: RESULT = num; :}
		|	VAR:var {: RESULT = tds.getValeur(var.toString()); :}
		|	appel_function
		|	PO entite expression PF
		;
		
entite_pour_return 	::= entite expression
					|	entite
					;

entite_pour_parametre 	::= INT VAR
						| 	entite
						| 	entite expression
						;

parametre 	::= entite_pour_parametre
			| 	entite_pour_parametre VIRGUL parametre
			;				
		

operateur	::= COMP
			|	INF
			|	SUP
			|	DIFF
			|	SUP_EGAL
			|	INF_EGAL
			;

condition 	::= PO entite operateur entite PF
			;

call 	::= CALL VAR PO parametre PF PV
						|	CALL VAR PO PF PV
						;
